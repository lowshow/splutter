var g;(function(s){s[s.connecting=0]="connecting",s[s.connected=1]="connected",s[s.outputting=2]="outputting",s[s.recording=3]="recording",s[s.outputtingAndRecording=4]="outputtingAndRecording"})(g||(g={}));var a=class{constructor(e,t,i,n){this.index=e,this.onChunk=t,this.state=0,this.input=i.createBiquadFilter(),this.input.type="lowpass",this.input.channelCount=1,this.input.frequency.setValueAtTime(6e3,i.currentTime),this.output=i.createScriptProcessor(n,1,1),this.processChunk=this.processChunk.bind(this),this.output.onaudioprocess=this.processChunk,this.input.connect(this.output),this.state=1,this.emptyBuffer=new Float32Array(n),this.unmutedStates=[2,4],this.recordingStates=[3,4]}processChunk(e){let t=Float32Array.from(e.inputBuffer.getChannelData(0));this.isRecording()&&this.onChunk(t,this.index),e.outputBuffer.getChannelData(0).set(this.isMuted()?this.emptyBuffer:t)}unmute(){if(this.state===0)return;this.state=this.state===3?4:2}mute(){if(this.state===0)return;this.state=this.state===4?3:1}record(){if(this.state===0)return;this.state=this.state===2?4:3}stop(){if(this.state===0)return;this.state=this.state===4?2:1}isMuted(){return!this.unmutedStates.includes(this.state)}isRecording(){return this.recordingStates.includes(this.state)}getState(){return this.state}},b;(function(s){s[s.notConnected=0]="notConnected",s[s.connected=1]="connected"})(b||(b={}));var u=class{constructor(e){this.processor=e;let t=window.AudioContext||window.webkitAudioContext;this.context=new t,this.context.suspend(),this.setDestinationChannels(),this.merger=this.context.createChannelMerger(this.context.destination.channelCount),this.merger.connect(this.context.destination),this.bufferSize=16384,this.channels=[],this.connections=[]}setDestinationChannels(){this.context.destination.maxChannelCount>this.context.destination.channelCount&&(this.context.destination.channelCount=this.context.destination.maxChannelCount),this.context.destination.channelInterpretation="discrete"}disconnectSplitter(){if(!this.splitter||this.channels.length===0)return;for(let e of this.channels)this.splitter.disconnect(e.input)}stopRecordChannel(e){if(this.channels[e].stop(),!this.channels[e].isMuted())return;for(let t=0;t<this.connections[e].length;t++)this.connections[e][t]===1&&(this.channels[e].output.disconnect(this.merger,0,t),this.connections[e][t]=0)}recordChannel(e){if(this.channels[e].isRecording())return;this.connections[e].some(t=>t===1)||(this.channels[e].output.connect(this.merger,0,0),this.connections[e][0]=1),this.channels[e].record()}muteOutputForInput(e,t){if(this.connections[e][t]===0)return;(!this.channels[e].isRecording()||this.connections[e].filter(i=>i===1).length>1)&&(this.channels[e].output.disconnect(this.merger,0,t),this.connections[e][t]=0),this.connections[e].filter(i=>i===1).reduce((i,n,h,o)=>{let y=this.channels[e].isRecording()&&o.length===1&&n===t||o.length===0;return o.splice(1),y},!1)&&this.channels[e].mute()}unmuteOutputForInput(e,t){if(!this.channels[e])return;if(this.connections[e][t]===0&&(this.channels[e].output.connect(this.merger,0,t),this.connections[e][t]=1),this.channels[e].isRecording()&&this.channels[e].isMuted())for(let i=0;this.connections[e].length;i++)i!==t&&this.connections[e][i]===1&&(this.channels[e].output.disconnect(this.merger,0,i),this.connections[e][i]=0);this.channels[e].isMuted()&&this.channels[e].unmute()}sampleRate(){return this.context.sampleRate}processorBufferSize(){return this.bufferSize}resume(){this.context.state==="suspended"&&this.context.resume()}async handleInputStream(e){this.source=this.context.createMediaStreamSource(e),this.disconnectSplitter(),this.splitter=this.context.createChannelSplitter(this.source.channelCount),this.source.connect(this.splitter);for(let t=0;t<this.source.channelCount;t++){this.channels[t]||(this.channels[t]=new a(t,this.processor.onChunk,this.context,this.bufferSize)),this.splitter?.connect(this.channels[t].input,t,0),this.connections[t]===void 0&&(this.connections[t]=[]);for(let i=0;i<this.context.destination.channelCount;i++)this.connections[t][i]===void 0&&(this.connections[t][i]=0)}return this.source.channelCount}stopAll(){for(let e=0;e<this.channels.length;e++)for(let t=0;t<this.channels.length;t++)this.stopRecordChannel(e),this.muteOutputForInput(e,t);this.context.suspend()}inputChannelCount(){return this.channels.length}outputChannelCount(){return this.context.destination.channelCount}recordingChannelCount(){return this.channels.reduce((e,t)=>t.isRecording()?e+1:e,0)}},c=class{constructor(){this.buffers=[],this.onChunk=this.onChunk.bind(this)}setBuffer(e,t){this.buffers[t]=e}bufferExists(e){return this.buffers[e]!==void 0}onChunk(e,t){this.buffers[t].feed(e)}stopBuffer(e){this.buffers[e].stop()}stopAll(){for(let e of this.buffers)e.stop()}initBuffer(e){this.buffers[e].init()}},m;(function(s){s[s.init=0]="init",s[s.requesting=1]="requesting",s[s.error=2]="error",s[s.granted=3]="granted"})(m||(m={}));var r;(function(s){s.noDevices="No media devices",s.notGranted="Access not granted",s.stopped="Device has stopped",s.noTracks="There are no media tracks",s.unknown="Unknown error",s.noError=""})(r||(r={}));var f=class{constructor(e){this.warn=e,this.state=0,this.error="",this.errorType=r.noError,this.deviceId="",this.deviceLabel="",this.checkDevices()}_stop(){this.mediaTrack?(this.mediaTrack.stop(),this.state=2,this.errorType=r.stopped):(this.state=2,this.errorType=r.noTracks)}checkDevices(){navigator.mediaDevices||(this.state=2,this.error="No media device API available.",this.errorType=r.noDevices)}hasError(){return this.state===2?this.errorType:""}getErrorMessage(){return this.error}tryReload(){this.state=0,this.checkDevices()}stop(){this._stop(),this.error="Device was stopped by the user"}async requestDeviceAccess(){switch(this.state){case 0:break;case 1:return;case 3:this.warn.onWarning("Device already accessed. Stop device if you want to request again.");return;case 2:this.warn.onWarning("Device has error. Check error and reload before proceeding.");return}return this.state=1,navigator.mediaDevices.getUserMedia({audio:{autoGainControl:!1,echoCancellation:!1,noiseSuppression:!1},video:!1}).then(e=>(this.state=3,this.mediaTrack=e.getAudioTracks()[0],this.mediaTrack?(this.deviceLabel=this.mediaTrack.label,this.deviceId=this.mediaTrack.getSettings().deviceId||"no_id",e):void 0)).catch(e=>{this.state=2,this.error=e.message,this.errorType=r.notGranted})}label(){return this.deviceLabel}id(){return this.deviceId}},C={MODE:"production",NODE_ENV:"production",SSR:!1};import.meta.env=C;var x;(function(s){s[s.free=0]="free",s[s.buffering=1]="buffering",s[s.ready=2]="ready",s[s.encoding=3]="encoding"})(x||(x={}));var v;(function(s){s[s.init=0]="init",s[s.running=1]="running",s[s.encoding=2]="encoding",s[s.idle=3]="idle",s[s.active=4]="active",s[s.error=5]="error"})(v||(v={}));var d=class{constructor(e,t,i){this.encodedHandler=e,this.fail=t,this.sampleRate=i,this.buffers=[],this.interval=0,this.state=0,this.encoding=-1,this.encodeWorker=new Worker(new URL("encoder/encoderWorker.min.js",import.meta.url),{name:"encode-worker",type:"module"}),this.onEncoderMessage=this.onEncoderMessage.bind(this),this.onEncoderError=this.onEncoderError.bind(this),this.encodeWorker.onmessage=this.onEncoderMessage,this.encodeWorker.onerror=this.onEncoderError,this.runEncoder=this.runEncoder.bind(this)}createBuffer(e){let t=new Float32Array(this.sampleRate);return{buffer:t,state:0,array:[t],encodedRef:-1,channel:e}}initWorker(){this.encodeWorker.postMessage({command:"init",encoderSampleRate:12e3,originalSampleRate:this.sampleRate,maxFramesPerPage:480,encoderApplication:2049,encoderFrameSize:20,encoderComplexity:0,resampleQuality:0,bitRate:12e3})}onEncoderMessage(e){if(this.state!==2)return;e.data.message==="done"?(this.encodedHandler.onEncoded(this.buffers[this.encoding].encodedRef),this.buffers[this.encoding].state=0,this.state=4):e.data.message==="page"&&(this.encodedHandler.buffers[this.buffers[this.encoding].encodedRef].buffer.set(e.data.page,this.encodedHandler.buffers[this.buffers[this.encoding].encodedRef].length),this.encodedHandler.buffers[this.buffers[this.encoding].encodedRef].length+=e.data.page.length)}onEncoderError(e){this.fail.onWarning(e),this.stopEncoder(),this.state=5}checkInitState(){if(this.state===0)return this.fail.onFailure(Error("Encoder in init state, buffers are not set.")),!0}runEncoder(){if(this.state!==4)return;this.state=1,this.encoding=this.buffers.findIndex(({state:e})=>e===2),this.encoding===-1?this.stopEncoder():(this.state=2,this.encode())}encode(){if(this.buffers[this.encoding].encodedRef=this.encodedHandler.getFreeBufferIndex(this.buffers[this.encoding].channel),this.buffers[this.encoding].encodedRef===-1){this.fail.onWarning("No encoded data buffer available."),this.buffers[this.encoding].state=2;return}this.initWorker(),this.encodeWorker.postMessage({command:"getHeaderPages"}),this.encodeWorker.postMessage({command:"encode",buffers:this.buffers[this.encoding].array}),this.encodeWorker.postMessage({command:"done"})}getFreeBufferIndex(e){if(this.checkInitState())return-1;let t=this.buffers.findIndex(({state:i})=>i===0);return t===-1?(this.fail.onFailure(Error("No free encoder buffers")),-1):(this.buffers[t].state=1,this.buffers[t].channel=e,t)}onSegment(e){if(this.checkInitState())return;this.buffers[e].state=2,this.state===3&&(this.state=4,this.interval=window.setInterval(this.runEncoder,50),this.runEncoder())}setChannels(e){this.buffers.length=0;for(let t=0;t<e*20;t++)this.buffers.push(this.createBuffer(t));this.state=3}stopEncoder(){this.state=3,window.clearInterval(this.interval);for(let e of this.buffers)e.state=0}},I;(function(s){s[s.inactive=0]="inactive",s[s.standby=1]="standby",s[s.buffering=2]="buffering",s[s.error=3]="error"})(I||(I={}));var l=class{constructor(e,t,i,n,h){this.segmentHandler=e,this.fail=t,this.channel=i,this.subBufferCount=Math.ceil(n/h),this.queue=Array(this.subBufferCount*30).fill(void 0).map(()=>new Float32Array(h)),this.queueProcessedState=Array(this.queue.length).fill(0),this.interval=0,this.state=0,this.bufferRef=-1,this.hang=new Float32Array(h),this.hangLength=0,this.bufferIndex=0,this.queueCount=0,this.queueIndex=0,this.queueCursor=0,this.generateSegment=this.generateSegment.bind(this)}generateSegment(){if(this.state!==1||this.queueCount<this.subBufferCount*2)return;if(this.state=2,this.bufferIndex=0,this.bufferRef=this.segmentHandler.getFreeBufferIndex(this.channel),this.bufferRef===-1){this.fail.onWarning("No buffer handler available."),this.state=1;return}for(this.hangLength>0&&(this.segmentHandler.buffers[this.bufferRef].buffer.set(this.hang,0),this.bufferIndex=this.hangLength,this.hangLength=0),this.queueIndex=this.queueIndex>=this.queue.length?0:this.queueIndex;this.queueIndex<this.queue.length&&!(this.bufferIndex>=this.segmentHandler.buffers[this.bufferRef].buffer.length);this.queueIndex+=1){let e=this.segmentHandler.buffers[this.bufferRef].buffer.length-this.bufferIndex,t=e<this.queue[this.queueIndex].length,i=t?this.queue[this.queueIndex].subarray(0,e):this.queue[this.queueIndex];this.segmentHandler.buffers[this.bufferRef].buffer.set(i,this.bufferIndex),this.bufferIndex+=i.length,t&&(this.hang.set(this.queue[this.queueIndex].subarray(e),0),this.hangLength=this.queue[this.queueIndex].length-e),this.queueProcessedState[this.queueIndex]=0,this.queueCount-=1,this.queueIndex>=this.queue.length-1&&(this.queueIndex=-1)}if(this.state!==2)return;this.state=1,this.segmentHandler.onSegment(this.bufferRef)}feed(e){if(this.state===0)return;if(this.queueCursor>=this.queue.length&&(this.queueCursor=0),this.queueProcessedState[this.queueCursor]===1){this.state=3,this.stop(),this.fail.onFailure(Error("Buffer too short, overwriting unencoded data"));return}this.queue[this.queueCursor].set(e),this.queueProcessedState[this.queueCursor]=1,this.queueCursor+=1,this.queueCount+=1}stop(){window.clearInterval(this.interval),this.state=0,this.queueCount=0,this.queueIndex=0,this.hangLength=0,this.queueCursor=0;for(let e=0;e<this.queueProcessedState.length;e++)this.queueProcessedState[e]=0}init(){if(this.state!==0){this.state=3,this.fail.onFailure(Error("Initing segment buffer while not inactive"));return}this.state=1,this.interval=window.setInterval(this.generateSegment,Math.floor(1e3/this.subBufferCount*.5))}},q;(function(s){s[s.free=0]="free",s[s.buffering=1]="buffering",s[s.ready=2]="ready",s[s.uploading=3]="uploading"})(q||(q={}));var w;(function(s){s[s.init=0]="init",s[s.running=1]="running",s[s.active=2]="active",s[s.uploading=3]="uploading",s[s.idle=4]="idle"})(w||(w={}));var p=class{constructor(e,t,i,n){this.streamStore=e,this.postUpload=t,this.fail=i,this.maxBytes=n,this.buffers=[],this.state=0,this.uploading=-1,this.interval=0,this.runUploader=this.runUploader.bind(this),this.upload=this.upload.bind(this)}createBuffer(e){let t=new Uint8Array(this.maxBytes);return{buffer:t,state:0,channel:e,length:0}}checkInitState(){if(this.state===0)return this.fail.onFailure(Error("Uploader in init state, buffers are not set.")),!0}runUploader(){if(this.state!==2)return;this.state=3,this.uploading=this.buffers.findIndex(({state:e})=>e===2),this.uploading===-1?this.stopUploader():(this.state=3,this.upload())}getBlob(){return new Blob([this.buffers[this.uploading].buffer.subarray(0,this.buffers[this.uploading].length)])}post(e,t){return new Promise(i=>{if(this.state!==3){i({url:e,error:Error("Attempted upload while uploading deactivated.")});return}fetch(e.toString(),{method:"POST",body:t}).then(n=>{i({response:n,url:e})}).catch(n=>{i({error:n,url:e})})})}upload(){let e=new FormData,t=new File([this.getBlob()],new Date().toISOString()+".opus",{type:"audio/ogg; codecs=opus"});e.append("audio",t),this.buffers[this.uploading].state=0,Promise.all(this.streamStore.getStreamURLsForChannel(this.buffers[this.uploading].channel).map(i=>this.post(i,e))).then(i=>{this.state=2,this.postUpload.handlePostUpload&&this.postUpload.onUploaded(i,e,this.buffers[this.uploading].channel)})}getFreeBufferIndex(e){if(this.checkInitState())return-1;let t=this.buffers.findIndex(({state:i})=>i===0);return t===-1?(this.fail.onFailure(Error("No free uploader buffers")),-1):(this.buffers[t].state=1,this.buffers[t].channel=e,this.buffers[t].length=0,t)}onEncoded(e){if(this.checkInitState())return;this.buffers[e].state=2,this.state===4&&(this.state=2,this.interval=window.setInterval(this.runUploader,50),this.runUploader())}setChannels(e){this.buffers.length=0;for(let t=0;t<e*20;t++)this.buffers.push(this.createBuffer(t));this.state=4}stopUploader(){this.state=4,window.clearInterval(this.interval);for(let e of this.buffers)e.state=0,e.length=0}},k=class{constructor(e){this.context=e,this.device=new f(this.context),this.bufferManager=new c,this.audio=new u(this.bufferManager),this.uploader=new p(this.context,this.context,this.context,3e3),this.encoder=new d(this.uploader,this.context,this.audio.sampleRate()),this.createBuffers=this.createBuffers.bind(this),this.startCapture=this.startCapture.bind(this),this.stopCapture=this.stopCapture.bind(this),this.inputDeviceInformation=this.inputDeviceInformation.bind(this)}createBuffers(e){for(let t=0;t<e;t++)this.bufferManager.bufferExists(t)||this.bufferManager.setBuffer(new l(this.encoder,this,t,this.audio.sampleRate(),this.audio.processorBufferSize()),t);this.encoder.setChannels(e),this.uploader.setChannels(e)}async startCapture(){this.audio.resume();switch(this.device.hasError()){case r.stopped:this.device.tryReload();break;case r.noError:break;default:this.context.onWarning(this.device.hasError());return}return this.device.requestDeviceAccess().then(e=>e?this.audio.handleInputStream(e):(this.context.onWarning("No stream available"),0)).then(this.createBuffers)}stopCapture(){this.audio.stopAll(),this.bufferManager.stopAll(),this.device.stop()}muteOutputChannelForInputChannel(e,t){this.audio.muteOutputForInput(e,t)}unmuteOutputChannelForInputChannel(e,t){this.audio.unmuteOutputForInput(e,t)}recordInputChannel(e){try{this.bufferManager.initBuffer(e),this.audio.recordChannel(e)}catch(t){this.stopRecordInputChannel(e),this.context.onWarning(t)}}stopRecordInputChannel(e){this.bufferManager.stopBuffer(e),this.audio.stopRecordChannel(e),this.audio.recordingChannelCount()===0&&(this.encoder.stopEncoder(),this.uploader.stopUploader())}inputDeviceInformation(){return{id:this.device.id(),label:this.device.label(),inputChannels:this.audio.inputChannelCount(),outputChannels:this.audio.outputChannelCount()}}onWarning(e){this.context.onWarning(e)}onFailure(e){this.context.onFailure(e),this.audio.stopAll(),this.bufferManager.stopAll(),this.audio.recordingChannelCount()===0&&(this.encoder.stopEncoder(),this.uploader.stopUploader())}};export{k as Splutter};
